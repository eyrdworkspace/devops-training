{% if conf['es-data']%}

{% for index in range(conf['es-data']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-es-data-{{index}}
    labels:
      app: elasticsearch
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster
        name: es-storage-es-data-{{index}}
{% if conf['es-data']['ebs-volumes']  and conf['es-data']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-data']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-data']['azure-disk']  and conf['es-data']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-data-{{index}}
      diskURI: {{conf['es-data']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4
{% else %}
    hostPath:
      path: /opt/eGov/es-storage-es-data-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['zookeeper']%}
{% for index in range(conf['zookeeper']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: zookeeper-data-zookeeper-{{index}}
    labels:
      app: zookeeper
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: backbone
        name: zookeeper-data-zookeeper-{{index}}
{% if conf['zookeeper']['ebs-volumes']  and conf['zookeeper']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['zookeeper']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['zookeeper']['azure-disk']  and conf['zookeeper']['azure-disk'][index]  %}
    azureDisk:
      diskName: zookeeper-{{index}}
      diskURI: {{conf['zookeeper']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4      
{% else %}
    hostPath:
      path: /opt/eGov/zookeeper-data-zookeeper-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: filestore-volume
    annotations:
      volume.beta.kubernetes.io/storage-class: "slow"
    labels:
      app: egov-filestore
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: egov
        name: filestore-volume-claim
    hostPath:
      path: {{conf['egov-filestore']['volume']}}
---
{% if conf['kafka']%}
{% for index in range(conf['kafka']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: kafka-data-kafka-{{index}}
    labels:
      app: kafka
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: backbone
        name: kafka-data-kafka-{{index}}
{% if conf['kafka']['ebs-volumes']  and conf['kafka']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['kafka']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['kafka']['azure-disk']  and conf['kafka']['azure-disk'][index]  %}
    azureDisk:
      diskName: kafka-{{index}}
      diskURI: {{conf['kafka']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4            
{% else %}
    hostPath:
      path: /opt/eGov/kafka-data-kafka-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}

{% if conf['prometheus'] %}
{% for index in range(conf['prometheus']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: prometheus-data-prometheus-{{index}}
    labels:
      app: prometheus
      component: core
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: monitoring
        name: prometheus-data-prometheus-{{index}}
{% if conf['prometheus']['ebs-volumes']  and conf['prometheus']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['prometheus']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['prometheus']['azure-disk']  and conf['prometheus']['azure-disk'][index]  %}
    azureDisk:
      diskName: prometheus-{{index}}
      diskURI: {{conf['prometheus']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4        
{% else %}
    hostPath:
      path: /opt/eGov/prometheus-data-prometheus-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}

{% if conf['grafana'] %}
{% for index in range(conf['grafana']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: grafana-data-grafana-{{index}}
    labels:
      app: grafana
      component: core
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: monitoring
        name: grafana-data-grafana-{{index}}
{% if conf['grafana']['ebs-volumes']  and conf['grafana']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['grafana']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['grafana']['azure-disk']  and conf['grafana']['azure-disk'][index]  %}
    azureDisk:
      diskName: grafana-{{index}}
      diskURI: {{conf['grafana']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4          
{% else %}
    hostPath:
      path: /opt/eGov/grafana-data-grafana-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}

{% if conf['secor'] %}

{% for index in range(conf['secor']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: secor-data-secor-{{index}}
    labels:
      app: secor
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: backbone
        name: secor-data-secor-{{index}}
{% if conf['secor']['ebs-volumes']  and conf['secor']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['secor']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['secor']['azure-disk']  and conf['secor']['azure-disk'][index]  %}
    azureDisk:
      diskName: secor-{{index}}
      diskURI: {{conf['secor']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4      
{% else %}
    hostPath:
      path: /secor/data/secor-data-secor-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['es-data-infra']%}

{% for index in range(conf['es-data-infra']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-infra-es-data-infra-{{index}}
    labels:
      app: elasticsearch
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster-infra
        name: es-storage-infra-es-data-infra-{{index}}
{% if conf['es-data-infra']['ebs-volumes']  and conf['es-data-infra']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-data-infra']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-data-infra']['azure-disk']  and conf['es-data-infra']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-data-infra-{{index}}
      diskURI: {{conf['es-data-infra']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4         
{% else %}
    hostPath:
      path: /opt/eGov/es-storage-infra-es-data-infra-{{index}}
{% endif %}
---
{% endfor %}
{% endif %}

{% if conf['zookeeper-v2']%}
{% for index in range(conf['zookeeper-v2']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: zookeeper-data-zookeeper-v2-{{index}}
    labels:
      app: zookeeper-v2
{% if conf['zookeeper-v2']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['zookeeper-v2']['zones'][index]}}
{% endif %}     
  spec:
    capacity:
      storage: {{conf['zookeeper-v2']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: zookeeper-cluster
        name: zookeeper-data-zookeeper-v2-{{index}}
{% if conf['zookeeper-v2']['ebs-volumes']  and conf['zookeeper-v2']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['zookeeper-v2']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['zookeeper-v2']['azure-disk']  and conf['zookeeper-v2']['azure-disk'][index]  %}
    azureDisk:
      diskName: zookeeper-{{index}}
      diskURI: {{conf['zookeeper-v2']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4         
{% endif %}
---
{% endfor %}
{% endif %}

{% if conf['kafka-v2-infra']%}
{% for index in range(conf['kafka-v2-infra']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: kafka-data-kafka-v2-infra-{{index}}
    labels:
      app: kafka-v2-infra
{% if conf['kafka-v2-infra']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['kafka-v2-infra']['zones'][index]}}
{% endif %}       
  spec:
    capacity:
      storage: {{conf['kafka-v2-infra']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: kafka-cluster
        name: kafka-data-kafka-v2-infra-{{index}}
{% if conf['kafka-v2-infra']['ebs-volumes']  and conf['kafka-v2-infra']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['kafka-v2-infra']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['kafka-v2-infra']['azure-disk']  and conf['kafka-v2-infra']['azure-disk'][index]  %}
    azureDisk:
      diskName: kafka-v2-infra-{{index}}
      diskURI: {{conf['kafka-v2-infra']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['kafka-v2']%}
{% for index in range(conf['kafka-v2']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: kafka-data-kafka-v2-{{index}}
    labels:
      app: kafka-v2
{% if conf['kafka-v2']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['kafka-v2']['zones'][index]}}
{% endif %}          
  spec:
    capacity:
      storage: {{conf['kafka-v2']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: kafka-cluster
        name: kafka-data-kafka-v2-{{index}}
{% if conf['kafka-v2']['ebs-volumes']  and conf['kafka-v2']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['kafka-v2']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['kafka-v2']['azure-disk']  and conf['kafka-v2']['azure-disk'][index]  %}
    azureDisk:
      diskName: kafka-{{index}}
      diskURI: {{conf['kafka-v2']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['es-master-v1']%}
{% for index in range(conf['es-master-v1']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-elasticsearch-master-v1-{{index}}
    labels:
      app: elasticsearch-master-v1
{% if conf['es-master-v1']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['es-master-v1']['zones'][index]}}
{% endif %}        
  spec:
    capacity:
      storage: {{conf['es-master-v1']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster
        name: es-storage-elasticsearch-master-v1-{{index}}
{% if conf['es-master-v1']['ebs-volumes']  and conf['es-master-v1']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-master-v1']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-master-v1']['azure-disk']  and conf['es-master-v1']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-master-{{index}}
      diskURI: {{conf['es-master-v1']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['es-data-v1']%}
{% for index in range(conf['es-data-v1']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-elasticsearch-data-v1-{{index}}
    labels:
      app: elasticsearch-data-v1
{% if conf['es-data-v1']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['es-data-v1']['zones'][index]}}
{% endif %}              
  spec:
    capacity:
      storage: {{conf['es-data-v1']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster
        name: es-storage-elasticsearch-data-v1-{{index}}
{% if conf['es-data-v1']['ebs-volumes']  and conf['es-data-v1']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-data-v1']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-data-v1']['azure-disk']  and conf['es-data-v1']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-data-v1-{{index}}
      diskURI: {{conf['es-data-v1']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['es-master-infra-v1']%}
{% for index in range(conf['es-master-infra-v1']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-elasticsearch-master-infra-v1-{{index}}
    labels:
      app: elasticsearch-master-infra-v1
{% if conf['es-master-infra-v1']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['es-master-infra-v1']['zones'][index]}}
{% endif %}        
  spec:
    capacity:
      storage: {{conf['es-master-infra-v1']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster-infra
        name: es-storage-elasticsearch-master-infra-v1-{{index}}
{% if conf['es-master-infra-v1']['ebs-volumes']  and conf['es-master-infra-v1']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-master-infra-v1']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-master-infra-v1']['azure-disk']  and conf['es-master-infra-v1']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-master-infra-{{index}}
      diskURI: {{conf['es-master-infra-v1']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}
{% if conf['es-data-infra-v1']%}
{% for index in range(conf['es-data-infra-v1']['replicas']) %}
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: es-storage-elasticsearch-data-infra-v1-{{index}}
    labels:
      app: elasticsearch-data-infra-v1
{% if conf['es-data-infra-v1']['zones']%}      
      failure-domain.beta.kubernetes.io/zone: {{conf['es-data-infra-v1']['zones'][index]}}
{% endif %}              
  spec:
    capacity:
      storage: {{conf['es-data-infra-v1']['storage-size']}}
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
        namespace: es-cluster-infra
        name: es-storage-elasticsearch-data-infra-v1-{{index}}
{% if conf['es-data-infra-v1']['ebs-volumes']  and conf['es-data-infra-v1']['ebs-volumes'][index]  %}
    awsElasticBlockStore:
      volumeID: {{conf['es-data-infra-v1']['ebs-volumes'][index]}}
      fsType: ext4
{% elif conf['es-data-infra-v1']['azure-disk']  and conf['es-data-infra-v1']['azure-disk'][index]  %}
    azureDisk:
      diskName: es-data-infra-infra-v1-{{index}}
      diskURI: {{conf['es-data-infra-v1']['azure-disk'][index]}}
      kind: Managed
      fsType: ext4       
{% endif %}
---
{% endfor %}
{% endif %}