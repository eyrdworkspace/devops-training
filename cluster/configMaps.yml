{% if conf['zookeeper-config']%}  
apiVersion: v1
data:
  zookeeper-config: |
    {{conf['zookeeper-config']['data']}}
kind: ConfigMap
metadata:
  name: zookeeper-config
  namespace: backbone
{% endif %}    
{% if conf['egov-config']%}  
---
apiVersion: v1
data:
  sms-enabled: "{{conf['egov-config']['sms-enabled']}}"
  es-log-request: "{{conf['egov-config']['es-log-request']}}"
  db-url: {{conf['egov-config']['db-url']}}
  db-host: {{conf['egov-config']['db-host']}}
  db-name: {{conf['egov-config']['db-name']}}
  kafka-brokers: {{conf['egov-config']['kafka-brokers']}}
  spring-datasource-tomcat-initialSize: "{{conf['egov-config']['spring-datasource-tomcat-initialSize']}}"
  es-indexer-host: {{conf['egov-config']['es-indexer-host']}}
  es-host: {{conf['egov-config']['es-host']}}
  flyway-locations: {{conf['egov-config']['flyway-locations']}}
  timezone: "{{conf['time-config']['timezone']}}"

kind: ConfigMap
metadata:
  name: egov-config
  namespace: egov
{% endif %}  
{% if conf['kafka-config']%} 
---
apiVersion: v1
data:
  topics: {{conf['kafka-config']['topics']}}
  zookeeper-connect: {{conf['kafka-config']['zookeeper-connect']}}
  kafka-brokers: {{conf['kafka-config']['kafka-brokers']}}
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: backbone
 {% endif %} 
 {% if conf['logging-config']%} 
---
apiVersion: v1
data:
  es-host: "{{conf['logging-config']['es-host']}}"
  es-port: "{{conf['logging-config']['es-port']}}"
kind: ConfigMap
metadata:
  name: logging-config
  namespace: logging
{% endif %}  
{% if conf['es-alerts']%}
---
apiVersion: v1
data:
  es-host: "{{conf['es-alerts']['es-host']}}"
  es-port: "{{conf['es-alerts']['es-port']}}"
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: monitoring
{% endif %}

{% if conf['egov-user'] and conf['egov-user']['flyway-locations']%}
---
apiVersion: v1
data:
  flyway-locations: "{{conf['egov-user']['flyway-locations']}}"
kind: ConfigMap
metadata:
  name: egov-user
  namespace: egov
{% endif %}
{% if conf['jaeger-config'] and conf['jaeger-config']['sampling-strategies']%}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: monitoring
  labels:
    app: jaeger
    jaeger-infra: configuration
data:
  span-storage-type: elasticsearch
  collector: |
    es:
      server-urls: "http://{{conf['logging-config']['es-host']}}:9200"
      username: ""
      password: ""
    collector:
      zipkin:
        http-port: 9411
  query: |
    es:
      server-urls: "http://{{conf['logging-config']['es-host']}}:9200"
      username: ""
      password: ""
  agent: |
    collector:
      host-port: "jaeger-collector:14267"
  sampling-strategies: |
  {{conf['jaeger-config']['sampling-strategies'] | indent(2, True)}}
{% endif %}
{% if conf['es-master-v1'] %}
---
# Source: elasticsearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-v1
  namespace: es-cluster
  labels:
    app: elasticsearch-v1
data:
  elasticsearch.yml: |-
    cluster.name: ${CLUSTER_NAME:elasticsearch}
    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}

    network.host: ${NETWORK_HOST:0.0.0.0}
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE:}
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
    path:
      data: ${ES_PATH_DATA:/usr/share/elasticsearch/data}
      logs: ${ES_PATH_LOGS:/usr/share/elasticsearch/logs}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
  pre-stop-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/usr/share/elasticsearch/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    ES_CLIENT=${ES_CLIENT_SVC}
    echo "Prepare to migrate data of the node ${NODE_NAME}"
    echo "Move all data from node ${NODE_NAME}"
    curl -s -XPUT -H 'Content-Type: application/json' 'http://{ES_CLIENT}:9200/_cluster/settings' -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
      }
    }"
    echo ""
    while true ; do
      echo -e "Wait for node ${NODE_NAME} to become empty"
      SHARDS_ALLOCATION=$(curl -s -XGET 'http://{ES_CLIENT}:9200/_cat/shards')
      if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
        break
      fi
      sleep 1
    done
    echo "Node ${NODE_NAME} is ready to shutdown"
  post-start-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/usr/share/elasticsearch/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    ES_CLIENT=${ES_CLIENT_SVC}
    CLUSTER_SETTINGS=$(curl -s -XGET "http://${ES_CLIENT}:9200/_cluster/settings")
    if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
      echo "Activate node ${NODE_NAME}"
      curl -s -XPUT -H 'Content-Type: application/json' "http://${ES_CLIENT}:9200/_cluster/settings" -d "{
        \"transient\" :{
            \"cluster.routing.allocation.exclude._name\" : null
        }
      }"
    fi
    echo "Node ${NODE_NAME} is ready to be used"
{% endif %}
{% if conf['es-curator'] %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: es-curator-config
  namespace: es-cluster-infra
data:
  action_file.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    #
    # Also remember that all examples have 'disable_action' set to True.  If you
    # want to use this action as a template, be sure to set this to False after
    # copying it.
    actions:
      1:
        action: delete_indices
        description: "Clean up ES by deleting old logs"
        options:
          timeout_override: 300
          continue_if_exception: False
          disable_action: ${LOGS_CLEANUP_DISABLED:True}
          ignore_empty_list: True
        filters:
        - filtertype: pattern
          kind: regex
          value: '^(egov-services-logs-|egov-infra-logs-|pbprod-logstash-|pbuat-logstash-).*$'   
        - filtertype: age
          source: creation_date
          direction: older
          unit: days
          unit_count: ${RETAIN_LOGS_IN_DAYS}               
        # - filtertype: age
        #   source: name
        #   direction: older
        #   timestring: '%Y.%m.%d'
        #   unit: days
        #   unit_count: 3
        #   field:
        #   stats_result:
        #   epoch:
        #   exclude: False
      2:
        action: delete_indices
        description: "Clean up ES by deleting old jaeger data"
        options:
          timeout_override: 300
          continue_if_exception: False
          disable_action: ${JAEGER_CLEANUP_DISABLED:True}
          ignore_empty_list: True
        filters:
        - filtertype: pattern
          kind: regex
          value: '^(jaeger-service-|jaeger-span-|jaeger-dependencies-).*$'   
        - filtertype: age
          source: creation_date
          direction: older
          unit: days
          unit_count: ${RETAIN_JAEGER_DATA_IN_DAYS}           
  config.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    client:
      hosts:
        - ${ES_CLIENT_HOST}
      port: ${ES_CLIENT_PORT}
      url_prefix:
      use_ssl: False
      certificate:
      client_cert:
      client_key:
      ssl_no_validate: False
      http_auth:
      timeout: 30
      master_only: False
    logging:
      loglevel: ${LOG_LEVEL:INFO}
      logfile:
      logformat: default
      blacklist: ['elasticsearch', 'urllib3']
{% endif %}
{% if conf['nginx']['nginx-global-configs-injection-enabled'] %}
apiVersion: v1
data: 
{{conf['nginx']['nginx-global-configs'] | indent(2, True)}}

kind: ConfigMap
metadata:
  name: nginx-globalconfigs-injection
  namespace: egov
{% endif %}
{% if conf['es-master-infra-v1'] %}
---
# Source: elasticsearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-infra-v1
  namespace: es-cluster-infra
  labels:
    app: elasticsearch-infra-v1
data:
  elasticsearch.yml: |-
    cluster.name: ${CLUSTER_NAME:elasticsearch}
    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}

    network.host: ${NETWORK_HOST:0.0.0.0}
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE:}
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
    path:
      data: ${ES_PATH_DATA:/usr/share/elasticsearch/data}
      logs: ${ES_PATH_LOGS:/usr/share/elasticsearch/logs}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
  pre-stop-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/usr/share/elasticsearch/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    ES_CLIENT=${ES_CLIENT_SVC}
    echo "Prepare to migrate data of the node ${NODE_NAME}"
    echo "Move all data from node ${NODE_NAME}"
    curl -s -XPUT -H 'Content-Type: application/json' 'http://{ES_CLIENT}:9200/_cluster/settings' -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
      }
    }"
    echo ""
    while true ; do
      echo -e "Wait for node ${NODE_NAME} to become empty"
      SHARDS_ALLOCATION=$(curl -s -XGET 'http://{ES_CLIENT}:9200/_cat/shards')
      if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
        break
      fi
      sleep 1
    done
    echo "Node ${NODE_NAME} is ready to shutdown"
  post-start-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/usr/share/elasticsearch/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    ES_CLIENT=${ES_CLIENT_SVC}
    CLUSTER_SETTINGS=$(curl -s -XGET "http://${ES_CLIENT}:9200/_cluster/settings")
    if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
      echo "Activate node ${NODE_NAME}"
      curl -s -XPUT -H 'Content-Type: application/json' "http://${ES_CLIENT}:9200/_cluster/settings" -d "{
        \"transient\" :{
            \"cluster.routing.allocation.exclude._name\" : null
        }
      }"
    fi
    echo "Node ${NODE_NAME} is ready to be used"
{% endif %}