# Source: kafka-v2-infra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-v2-infra
  namespace: kafka-cluster
  labels:
    app: kafka-v2-infra
spec:
  ports:
    - port: 9092
      name: broker
  selector:
    app: kafka-v2-infra
---
# Source: kafka-v2-infra/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-v2-infra-headless
  namespace: kafka-cluster
  labels:
    app: kafka-v2-infra
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: kafka-v2-infra
---
# Source: kafka-v2-infra/templates/statefulset.yaml

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kafka-v2-infra
  namespace: kafka-cluster
  labels:
    app: kafka-v2-infra
spec:
  serviceName: kafka-v2-infra-headless
  podManagementPolicy: OrderedReady
  replicas: {{conf['kafka-v2-infra']['replicas']}}
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: kafka-v2-infra
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka-v2-infra
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kafka-v2-infra-broker
        image: {{conf['kafka-v2-infra']['images'][0]}}
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          limits:
            cpu: 500m
            memory: 1152Mi
          requests:
            cpu: 300m
            memory: 1024Mi
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1                      
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name   
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace                           
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: KAFKA_HEAP_OPTS
          value: {{conf['kafka-v2-infra']['heap']}}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{conf['kafka-v2-infra']['zookeeper-connect']}}
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka-data/logs"          
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "{{conf['kafka-v2-infra']['offsets-topic-replication-factor']}}"
        - name: "KAFKA_LINGER_MS"
          value: "{{conf['kafka-v2-infra']['linger-ms']}}"
        - name: "KAFKA_NUM_PARTITIONS"
          value: "{{conf['kafka-v2-infra']['num-partitions']}}"
        - name: "KAFKA_DEFAULT_REPLICATION_FACTOR"
          value: "{{conf['kafka-v2-infra']['default-replication-factor']}}"
        - name: "KAFKA_MIN_INSYNC_REPLICAS"
          value: "{{conf['kafka-v2-infra']['min-insync-replicas']}}"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.kafka-v2-infra-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        lifecycle:
          preStop:
            exec:
             command: ["sh", "-ce", "kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done"]          
        volumeMounts:
        - name: kafka-data
          mountPath: /opt/kafka-data
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{conf['kafka-v2-infra']['storage-size']}}"
